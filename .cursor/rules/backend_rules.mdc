# Правила для Backend-разработки

```yaml
---
title: Правила для Backend-разработки MCP-сервера и приложения-дневника
version: 1.0
date: 2025-06-29
dependencies:
  - src/server/
  - config/mcp.yaml
  - config/notifications.yaml
priority: P1
estimated_duration: 1 day
responsible: Backend Developer
---
```

## Описание

Правила определяют стандарты для backend-разработки MCP-сервера и приложения-дневника, включая API, синхронизацию, безопасность и интеграции (Эпики 1–6, 8–9). Они обеспечивают надежность, масштабируемость и безопасность кода.

## Правила
1. **Фреймворк**:
   - Использовать FastAPI для REST и WebSocket API (Эпики 1–4).
   - Реализовать асинхронные endpoint’ы с `asyncio` для массовых операций (1000+ файлов, Эпик 2, 3).
2. **Модули**:
   - Разделять логику на модули: `initialize.py`, `auth.py`, `yandex_disk.py`, `sync.py` (Эпики 1–3, 6).
   - Каждый модуль — один класс (например, `ProjectInitializer`, `AuthService`).
3. **Хранилище**:
   - Использовать `archive/<username>/<project_name>/` для данных (Эпик 1).
   - Кэшировать контекст в `memory-bank/cache/` с `redis` (Эпики 2, 3, 5).
   - Версионировать изменения с Git (Эпик 8).
4. **Интеграции**:
   - Яндекс.Диск: OAuth с `aiohttp` для загрузки/скачивания (Эпик 2).
   - Telegram: `python-telegram-bot` для уведомлений (Эпик 9).
   - xAI API: LLM-аналитика и шаблоны (Эпик 5).
   - ЮKassa: платежи для подписок (приложение-дневник).
5. **Безопасность**:
   - JWT-авторизация для всех endpoint’ов, кроме `/login`, `/register` (Эпик 6).
   - Шифрование файлов и кэша с `cryptography` (Эпик 6).
   - Rate limiting с `redis` (100 запросов/мин, Эпик 6).
6. **Логирование**:
   - Логировать действия в `auditLog.md` (пользователь, время, операция, Эпики 1–6).
   - Логировать изменения в `changelog.md` (события, объем данных, Эпики 1–5).
7. **Тестирование**:
   - Писать юнит-тесты в `tests/test_*.py` с `pytest` (Эпики 1–6, 8).
   - Проверять краевые случаи (ошибки API, пустые данные).
   - Интегрировать в GitHub Actions.

## Пример
- **Файл**: `src/server/auth.py`
- **Код**: Класс `AuthService` с методами `login`, `register`, `verify_token` (Эпик 6).
- **Тест**: `tests/test_auth.py` с проверкой JWT и двухфакторной аутентификации.
- **Лог**: Запись в `auditLog.md`: "2025-06-29 14:14: user1 logged in".