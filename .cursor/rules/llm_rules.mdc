# Правила для LLM-интеграции

```yaml
---
title: Правила для интеграции LLM в MCP-сервер и приложение-дневник
version: 1.0
date: 2025-06-29
dependencies:
  - config/llm.yaml
  - memory-bank/
priority: P1
estimated_duration: 1 day
responsible: AI Engineer
---
```

## Описание

Правила определяют стандарты для интеграции LLM (Grok) в MCP-сервер и приложение-дневник, включая генерацию шаблонов, аналитику и ревью кода (Эпик 5). Они обеспечивают точность и производительность LLM.

## Правила
1. **Конфигурация**:
   - Настраивать LLM в `config/llm.yaml` (модель, API-ключ xAI, Эпик 5).
   - Кэшировать контекст в `memory-bank/cache/` с `redis` (Эпик 5).
2. **Промпты**:
   - Создавать промпты на основе `docs/`, `cursor_rules/`, `knowledge_packages/` (Эпик 5).
   - Пример: "Сгенерируй JSON-смету: материалы, работа, итог."
3. **Функции**:
   - Генерация шаблонов (сметы, договоры) в `memory-bank/custom_commands/` (Эпик 5).
   - Аналитика затрат (например, "Материалы: 50,000 ₽") в `reports/` (Эпик 5).
   - Ревью кода и правил перед federation (Эпики 2, 5).
4. **Валидация**:
   - Проверять результаты LLM на корректность (JSON-схемы, формат).
   - Логировать ошибки в `changelog.md` (Эпик 5).
5. **Тестирование**:
   - Писать тесты в `tests/test_llm.py` с моком xAI API (Эпик 5).
   - Проверять генерацию, аналитику, ревью.
6. **Оптимизация**:
   - Минимизировать запросы к xAI API с помощью кэширования (Эпик 5).
   - Ограничивать объем данных в промптах (<10 МБ).

## Пример
- **Промпт**: "Сгенерируй JSON-смету: материалы, работа, итог."
- **Вывод**: `memory-bank/custom_commands/user1/proj1/smeta.json`.
- **Тест**: `tests/test_llm.py` с проверкой формата JSON.