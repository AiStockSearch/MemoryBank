# Правила для Frontend-разработки

```yaml
---
title: Правила для Frontend-разработки приложения-дневника
version: 1.0
date: 2025-06-29
dependencies:
  - frontend/src/
  - config/mcp.yaml
priority: P1
estimated_duration: 1 day
responsible: Frontend Developer
---
```

## Описание

Правила определяют стандарты для frontend-разработки приложения-дневника, включая React PWA, визуализацию данных и интеграцию с Cursor IDE (Эпик 7). Они обеспечивают адаптивность, производительность и интуитивный UX.

## Правила
1. **Фреймворк**:
   - Использовать React (PWA) с Apollo Client для GraphQL (Эпик 7).
   - Стилизовать с Tailwind CSS (синий #1E3A8A, оранжевый #F97316).
2. **Компоненты**:
   - Создавать переиспользуемые компоненты в `frontend/src/components/` (например, `ProjectTree.js`, Эпик 7).
   - Один компонент = одна функциональность (например, визуализация дерева).
3. **Визуализация**:
   - Использовать `react-tree` для отображения `archive/<username>/<project_name>/` (Эпик 7).
   - Генерировать диаграммы связей с Mermaid (например, заказ → смета, Эпик 7).
4. **Адаптивность**:
   - Поддерживать разрешения: 320px, 768px, 1440px.
   - Проверять скорость загрузки (<2 сек).
5. **Интеграция с Cursor IDE**:
   - Реализовать плагин для редактирования заметок и предпросмотра данных (Эпик 7).
   - Настроить автодополнение на основе `custom_commands/` (Эпики 1, 2, 5).
6. **Тестирование**:
   - Писать тесты с `jest` и `react-testing-library` в `frontend/tests/` (Эпик 7).
   - Проверять рендеринг, клики, GraphQL-запросы.
   - Интегрировать в GitHub Actions.
7. **SEO**:
   - Оптимизировать `index.html` для лендинга с ключевыми словами ("отделка", "сметы").
   - Добавить мета-теги и H1.

## Пример
- **Компонент**: `frontend/src/components/ProjectTree.js`
- **Функция**: Отображение дерева проектов с `react-tree` (Эпик 7).
- **Тест**: `frontend/tests/ProjectTree.test.js` с проверкой рендеринга.
- **UI**: Адаптивный дизайн с Tailwind CSS.