# Cursor Rules (ROOLS) для MCP-сервера и приложения-дневника

```yaml
---
title: Правила ИИ-помощника Cursor для разработки MCP-сервера и приложения-дневника
version: 1.0
date: 2025-06-29
dependencies:
  - archive/
  - memory-bank/
  - config/mcp.yaml
  - config/llm.yaml
  - config/notifications.yaml
  - docs/
priority: P1
estimated_duration: 2 days
responsible: Technical Writer, AI Engineer
---
```

## Описание

Этот документ является обзорным для правил ИИ-помощника Cursor (ROOLS), используемого в разработке MCP-сервера и мобильного приложения-дневника для отделочников. Он содержит ссылки на специфические правила для backend, frontend, LLM, тестирования, документации и портрет разработчика, а также описывает бизнес-процесс разработки с UML-диаграммой.

**Цель**:
- Обеспечить консистентность, качество и эффективность разработки.
- Автоматизировать генерацию кода, ревью, тестирование и документацию.
- Поддерживать масштабируемость и безопасность проекта.
- Достичь целей приложения (100,000–500,000 ₽/мес. к декабрю 2025).

**Зависимости**:
- Эпики MCP-сервера (1–9) из `MCP_MVP_Epics_Updated.markdown` и `epic_*.markdown`.
- План приложения-дневника из `ConstructionDiaryAppSummaryPlan.markdown`.
- `federation_backlog.md` для улучшений federation.

**Текущая дата и время**: 14:14 CEST, воскресенье, 29 июня 2025.

## Структура правил

Правила разделены на следующие файлы для модульности и атомарности:

- [backend_rules.md](backend_rules.md): Правила для backend-разработки (FastAPI, авторизация, синхронизация).
- [frontend_rules.md](frontend_rules.md): Правила для frontend-разработки (React PWA, визуализация).
- [llm_rules.md](llm_rules.md): Правила для интеграции LLM (Grok, шаблоны, аналитика).
- [testing_rules.md](testing_rules.md): Правила для тестирования (pytest, jest).
- [documentation_rules.md](documentation_rules.md): Правила для документации (Markdown, примеры).
- [developer_profile.md](developer_profile.md): Портрет разработчика (навыки, роли).

## Бизнес-процесс

### Описание
Бизнес-процесс описывает, как Cursor автоматизирует разработку, тестирование, документацию и масштабирование MCP-сервера и приложения-дневника для отделочников, чтобы достичь целей по доходу. Процесс включает инициализацию проектов, federation, синхронизацию, LLM-аналитику, безопасность, UI и уведомления.

### Этапы
1. **Инициализация проекта**:
   - Cursor создает `archive/<username>/<project_name>/` с шаблонами (Эпик 1).
   - Генерирует команды LLM для смет и заказов (Эпик 5).
   - Логирует в `auditLog.md`, отправляет уведомление (Эпик 9).
2. **Federation и синхронизация**:
   - Реализует push/pull данных с Яндекс.Диском (Эпик 2, 3).
   - Проверяет правила и конфликты, кэширует контекст (Эпик 2, 3).
3. **Разработка API**:
   - Создает GraphQL API для задач, заказов, аналитики (Эпик 4).
   - Интегрирует JWT-авторизацию и rate limiting (Эпик 6).
4. **LLM-интеграция**:
   - Генерирует шаблоны (сметы, договоры) и аналитику затрат (Эпик 5).
   - Проводит ревью кода и правил (Эпик 5).
5. **UI и визуализация**:
   - Разрабатывает React PWA с визуализацией данных (Эпик 7).
   - Интегрирует Cursor IDE для предпросмотра (Эпик 7).
6. **Тестирование и ревью**:
   - Пишет тесты для всех функций (Эпики 1–7).
   - Проверяет код с Bandit, Safety, Snyk (Эпик 6).
7. **Масштабирование**:
   - Оптимизирует массовые операции (1000+ файлов) (Эпик 2, 3).
   - Настраивает Docker для деплоя (Эпик 8).
8. **Поддержка пользователей**:
   - Генерирует гайды и FAQ в `docs/` (Эпик 7).
   - Отправляет уведомления о новых функциях (Эпик 9).

### UML-диаграмма

```mermaid
sequenceDiagram
    participant U as User
    participant C as Cursor
    participant M as MCP_Server
    participant B as Memory_Bank
    participant Y as Yandex_Disk
    participant L as LLM
    participant N as Notification

    U->>C: Инициализация проекта
    C->>M: POST /initialize
    M->>B: Создать archive/<username>/<project_name>/
    M->>L: Генерировать шаблоны
    L-->>M: smeta.json
    M->>B: Сохранить в custom_commands/
    M->>N: Уведомление (Telegram)
    M-->>C: Проект создан

    U->>C: Синхронизация данных
    C->>M: POST /sync
    M->>Y: Push/pull на Яндекс.Диск
    M->>B: Лог в changelog.md
    M->>N: Уведомление (email)

    C->>M: Ревью кода
    M->>L: Проверить auth.py
    L-->>M: Рекомендации
    M->>B: Сохранить в reports/
    C->>M: Запуск тестов
    M->>B: Лог в test_results.md

    U->>C: Запрос аналитики
    C->>M: GraphQL query analytics
    M->>L: Анализ затрат
    L-->>M: Отчет
    M->>B: Сохранить в reports/
    M->>N: Уведомление (PWA)
```

## Следующие шаги
1. **Создать подфайлы правил** (1 день):
   - Разделить правила на `backend_rules.md`, `frontend_rules.md`, и т.д.
   - Ответственный: Technical Writer.
2. **Настроить Cursor** (1 день):
   - Интегрировать правила в `config/cursor.yaml`.
   - Ответственный: AI Engineer.
3. **Тестирование правил** (1 день):
   - Проверить генерацию кода и ревью на тестовых задачах.
   - Ответственный: QA Engineer.
4. **Обучение команды** (1 день):
   - Провести workshop по использованию правил.
   - Ответственный: Team Lead.

## Заключение
Этот документ связывает все правила Cursor, обеспечивая модульность и ясность. Подробные правила находятся в соответствующих файлах. Для уточнений или доработок (например, конкретные промпты) обратитесь к ответственным.